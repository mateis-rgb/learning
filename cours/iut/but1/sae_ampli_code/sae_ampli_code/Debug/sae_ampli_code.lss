
sae_ampli_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069e  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c6  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006f  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitTimer>:

#include "../include/Timer.h"

void InitTimer (void)
{
	TCCR0 = 0x0B;
  7c:	8b e0       	ldi	r24, 0x0B	; 11
  7e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  80:	12 be       	out	0x32, r1	; 50
	OCR0 = 124;
  82:	8c e7       	ldi	r24, 0x7C	; 124
  84:	8c bf       	out	0x3c, r24	; 60
  86:	08 95       	ret

00000088 <Tempo_1ms>:
}


void Tempo_1ms (void)
{
	TIFR = 1 << OCF0;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	88 bf       	out	0x38, r24	; 56
	
	while ((TIFR & (1 << OCF0)) == 0);
  8c:	08 b6       	in	r0, 0x38	; 56
  8e:	01 fe       	sbrs	r0, 1
  90:	fd cf       	rjmp	.-6      	; 0x8c <Tempo_1ms+0x4>
}
  92:	08 95       	ret

00000094 <AppuiBPP>:
	while (1);
}


void AppuiBPP (void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	unsigned int cpt = 0;
	
	if ((PINB & (1 << PB6)) != 0)
  98:	b6 99       	sbic	0x16, 6	; 22
  9a:	11 c0       	rjmp	.+34     	; 0xbe <AppuiBPP+0x2a>
  9c:	14 c0       	rjmp	.+40     	; 0xc6 <AppuiBPP+0x32>
	{				
		cpt = 0;
						
		while ((PINB & (1 << PB6)) != 0)
		{
			Tempo_1ms();
  9e:	0e 94 44 00 	call	0x88	; 0x88 <Tempo_1ms>
				
			cpt++;
  a2:	21 96       	adiw	r28, 0x01	; 1
				
			if (cpt > 3000) 
  a4:	c9 3b       	cpi	r28, 0xB9	; 185
  a6:	8b e0       	ldi	r24, 0x0B	; 11
  a8:	d8 07       	cpc	r29, r24
  aa:	58 f0       	brcs	.+22     	; 0xc2 <AppuiBPP+0x2e>
			{
				PORTB = 0x00;
  ac:	18 ba       	out	0x18, r1	; 24
				
				state = !state;	
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	91 11       	cpse	r25, r1
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					
				cpt = 0;
				
				break;
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <AppuiBPP+0x32>
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	d0 e0       	ldi	r29, 0x00	; 0
	
	if ((PINB & (1 << PB6)) != 0)
	{				
		cpt = 0;
						
		while ((PINB & (1 << PB6)) != 0)
  c2:	b6 99       	sbic	0x16, 6	; 22
  c4:	ec cf       	rjmp	.-40     	; 0x9e <AppuiBPP+0xa>
				
				break;
			}
		}
	}
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <main>:

unsigned char state = 0;

int main(void)
{	
	InitTimer();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <InitTimer>
	
	DDRD = 0x80;
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	81 bb       	out	0x11, r24	; 17
	DDRB = 0x80;
  d4:	87 bb       	out	0x17, r24	; 23
	PORTD = 0x00;	
  d6:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x00;
  d8:	18 ba       	out	0x18, r1	; 24
	
	DDRC = 1 << PC7;
  da:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  dc:	15 ba       	out	0x15, r1	; 21
	
    do 
    {
		AppuiBPP();
  de:	0e 94 4a 00 	call	0x94	; 0x94 <AppuiBPP>
		
		if (state == 1)
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	21 f4       	brne	.+8      	; 0xf2 <main+0x26>
		{
			PORTC = (1 << PC7);
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	85 bb       	out	0x15, r24	; 21
			PORTD = (1 << PD7);
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	f6 cf       	rjmp	.-20     	; 0xde <main+0x12>
		}
		else
		{
			PORTD = 0x00;
  f2:	12 ba       	out	0x12, r1	; 18
			PORTC = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21
  f6:	f3 cf       	rjmp	.-26     	; 0xde <main+0x12>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
